(dp1
S'output'
p2
S"<type 'exceptions.RuntimeError'> Cannot compare auth_user.age >= None"
p3
sS'layer'
p4
S'C:\\Users\\Rishith Reddy\\Documents\\web2py\\applications\\MatrimonialProject\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    """\n    response.flash = T("Welcome to web2py!")\n    form = SQLFORM(db.users)\n    if form.process().accepted:\n        response.flash("Registered!")\n    return dict(message=T(\'Hello World\'), form=form)\n    """\n    """\n    if request.args(0)==\'login\':\n        if form.process().accepted:\n            redirect(URL(\'search\'))\n    """\n    if auth.user:\n        redirect(URL(\'user/profile\'))\n    else:\n        redirect(URL(\'user/login\'))\n    return dict()\n\n@auth.requires_login()\ndef search():\n    form = crud.create(db.find)\n    if(form.process().accepted):\n        redirect(URL(\'default\',\'result\',vars=form.vars))\n    return dict(form=form)\n\n@auth.requires_login()\ndef result():\n    q1 = db.auth_user.sex==request.vars.sex\n    amin = db.auth_user.age >= request.vars.minimum_age\n    amax = db.auth_user.age <= request.vars.maximum_age\n    sal = db.auth_user.salary >= request.vars.minimum_salary\n    rows=db(q1 & amin & amax & sal).select(db.auth_user.first_name, db.auth_user.last_name, db.auth_user.age, db.auth_user.salary)\n    return dict(rows=rows)\n    #return dict(sex=request.vars.sex)\n    \ndef view_users():\n    dic = db(db.auth_user).select()\n    return dict(dic = dic)\n\n@auth.requires_login()\ndef view_user():\n    user = db(db.auth_user.last_name == request.args[0]).select()\n    return dict(user = user)\n\ndef message():\n    db.messages.me.default=auth.user.last_name\n    db.messages.dest.default=request.args[0]\n    db.messages.sent_on.default=request.now\n    form=crud.create(db.messages)\n    q1=db.messages.me==auth.user.last_name\n    q2=db.messages.dest==request.args[0]\n    q3=db.messages.me==request.args[0]\n    q4=db.messages.dest==auth.user.last_name\n    prev=db(q1&q2 | q3&q4).select(orderby=db.messages.sent_on,limitby=(0,10))\n    return locals()\n\n@auth.requires_login()\ndef inbox():\n    q1=db.messages.dest==auth.user.last_name\n    one=db(q1).select(db.messages.me,distinct=True,orderby=db.messages.sent_on)\n    return locals()\n\n@auth.requires_login()\ndef outbox():\n    q1=db.messages.me==auth.user.last_name\n    one=db(q1).select(db.messages.dest,distinct=True,orderby=db.messages.sent_on)\n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef register():\n    form = SQLFORM(db.users);\n    return dict(form = form)\n\n@auth.requires_login()\ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(result)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\applications\\MatrimonialProject\\controllers/default.py", line 140, in <module>\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\tools.py", line 3449, in f\n    return action(*a, **b)\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\applications\\MatrimonialProject\\controllers/default.py", line 51, in result\n    rows=db(q1 & amin & amax & sal).select(db.auth_user.first_name, db.auth_user.last_name, db.auth_user.age, db.auth_user.salary)\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2076, in select\n    return adapter.select(self.query,fields,attributes)\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 125, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1218, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1116, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 901, in expand\n    out = op(first, second, **optional_args)\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 740, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 901, in expand\n    out = op(first, second, **optional_args)\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 740, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 901, in expand\n    out = op(first, second, **optional_args)\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 740, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 903, in expand\n    out = op(first,**optional_args)\n  File "C:\\Users\\Rishith Reddy\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 826, in GE\n    raise RuntimeError("Cannot compare %s >= None" % first)\nRuntimeError: Cannot compare auth_user.age >= None\n'
p11
s.